// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2023 23:55:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ArchivoRegistros
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ArchivoRegistros_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] Cmd;
reg [4:0] DST;
reg [7:0] Fx;
reg Reloj;
reg Reset;
reg [4:0] SelBus;
reg [4:0] SRC;
// wires                                               
wire [7:0] Ax_t;
wire [7:0] Bus_t;
wire [7:0] Bx_t;
wire [7:0] r_t;
wire [7:0] x_t;
wire [7:0] y_t;

// assign statements (if any)                          
ArchivoRegistros i1 (
// port map - connection between master ports and signals/registers   
	.Ax_t(Ax_t),
	.Bus_t(Bus_t),
	.Bx_t(Bx_t),
	.Cmd(Cmd),
	.DST(DST),
	.Fx(Fx),
	.r_t(r_t),
	.Reloj(Reloj),
	.Reset(Reset),
	.SelBus(SelBus),
	.SRC(SRC),
	.x_t(x_t),
	.y_t(y_t)
);
initial 
begin 
#1000000 $finish;
end 

// Reloj
always
begin
	Reloj = 1'b0;
	Reloj = #10000 1'b1;
	#10000;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #20000 1'b0;
end 
// Cmd[ 2 ]
initial
begin
	Cmd[2] = 1'b0;
end 
// Cmd[ 1 ]
initial
begin
	Cmd[1] = 1'b0;
end 
// Cmd[ 0 ]
initial
begin
	Cmd[0] = 1'b0;
	Cmd[0] = #20000 1'b1;
	Cmd[0] = #60000 1'b0;
end 
// SelBus[ 4 ]
initial
begin
	SelBus[4] = 1'b0;
end 
// SelBus[ 3 ]
initial
begin
	SelBus[3] = 1'b0;
	SelBus[3] = #60000 1'b1;
	SelBus[3] = #20000 1'b0;
end 
// SelBus[ 2 ]
initial
begin
	SelBus[2] = 1'b0;
	SelBus[2] = #20000 1'b1;
	SelBus[2] = #40000 1'b0;
end 
// SelBus[ 1 ]
initial
begin
	SelBus[1] = 1'b0;
end 
// SelBus[ 0 ]
initial
begin
	SelBus[0] = 1'b0;
	SelBus[0] = #20000 1'b1;
	SelBus[0] = #40000 1'b0;
end 
// SRC[ 4 ]
initial
begin
	SRC[4] = 1'b0;
end 
// SRC[ 3 ]
initial
begin
	SRC[3] = 1'b0;
end 
// SRC[ 2 ]
initial
begin
	SRC[2] = 1'b0;
end 
// SRC[ 1 ]
initial
begin
	SRC[1] = 1'b0;
end 
// SRC[ 0 ]
initial
begin
	SRC[0] = 1'b0;
end 
// DST[ 4 ]
initial
begin
	DST[4] = 1'b0;
end 
// DST[ 3 ]
initial
begin
	DST[3] = 1'b0;
end 
// DST[ 2 ]
initial
begin
	DST[2] = 1'b0;
	DST[2] = #20000 1'b1;
	DST[2] = #40000 1'b0;
end 
// DST[ 1 ]
initial
begin
	DST[1] = 1'b0;
	DST[1] = #20000 1'b1;
	DST[1] = #40000 1'b0;
end 
// DST[ 0 ]
initial
begin
	DST[0] = 1'b0;
	DST[0] = #40000 1'b1;
	DST[0] = #20000 1'b0;
end 
// Fx[ 7 ]
initial
begin
	Fx[7] = 1'b0;
end 
// Fx[ 6 ]
initial
begin
	Fx[6] = 1'b0;
end 
// Fx[ 5 ]
initial
begin
	Fx[5] = 1'b0;
end 
// Fx[ 4 ]
initial
begin
	Fx[4] = 1'b0;
end 
// Fx[ 3 ]
initial
begin
	Fx[3] = 1'b0;
end 
// Fx[ 2 ]
initial
begin
	Fx[2] = 1'b0;
	Fx[2] = #20000 1'b1;
	Fx[2] = #20000 1'b0;
end 
// Fx[ 1 ]
initial
begin
	Fx[1] = 1'b0;
	Fx[1] = #20000 1'b1;
	Fx[1] = #40000 1'b0;
end 
// Fx[ 0 ]
initial
begin
	Fx[0] = 1'b0;
	Fx[0] = #20000 1'b1;
	Fx[0] = #40000 1'b0;
end 
endmodule

