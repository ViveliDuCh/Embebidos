FUNCTION RegUnivEn (Reloj, Reset, Dato[7..0], Cmd [2..0], Enable)
	RETURNS (Salida[7..0]);


FUNCTION RegLoad (Reloj, Reset, Dato[7..0], Load, Enable)
	RETURNS (Salida[7..0]);
	
FUNCTION RegLoad_17bits (Reloj, Reset, Dato[16..0], Enable)
	RETURNS (Salida[16..0]);

	
%FUNCTION ALU (in_x[7..0], in_y[7..0]  )
	RETURNS (R[7..0] );%
	
FUNCTION ALU_final( Reloj, Reset, Enable, A[7..0], B[7..0], Operation[2..0])
	RETURNS(CarryOut, Overflow, Zero, Negative, AgtB, AstB, AeqB, Error, Result[16..0], Remain[7..0]);


SUBDESIGN ArchivoRegistros(
	Reloj, Reset, Fx[7..0],SelOp[2..0], SelDST, SelSRC, SelMAR, SelMDR, Cmd[2..0], DST_UC[4..0], SRC_UC[4..0], DATA_BUS_IN[7..0]: INPUT;
	SRC_t[7..0],DST_t[7..0],Ax_t[7..0], Bx_t[7..0],Cx_t[7..0],Dx_t[7..0],Ex_t[7..0],x_t[7..0],y_t[7..0],r_t[16..0],res_t[7..0], ALU_t[16..0], Bus_t[7..0],Flags_t[7..0],PC_t[7..0], MAR_t[7..0],MDR_t[7..0], IR_t[7..0],SelBus_t[4..0], DATA_BUS_OUT[7..0], ADDR_BUS[7..0]: OUTPUT;
)

VARIABLE
FLAGS[7..0] : NODE;

BUS[7..0] : NODE;
ALU : ALU_final;

SelMUX[4..0] : NODE;

SelBus[4..0] : NODE;

% Registros Generales%

Ax : RegUnivEn;  % 0 %
Bx : RegUnivEn;  % 1 %
Cx : RegUnivEn;  % 2 %
Dx : RegUnivEn;  % 3 %
Ex : RegUnivEn;  % 4 %

% Registro de ALU%
alu_x : RegLoad; % 6 %
alu_y : RegLoad; % 7 %
alu_r : RegLoad_17bits; % 8 %
alu_res : RegLoad;

% Registros destino y fuente%
DST : RegLoad    ;% 9 %
SRC : RegLoad;   % 10 %

% Registros de Trabajo con RAM%
PC  : RegUnivEn; % 11 %
MAR : RegLoad;   % 12 %
MDR : RegLoad;   % 13 %
IR  : RegLoad;   % 14 %
BP  : RegLoad;   % 15 %
SP  : RegUnivEn; % 16 %
SI  : RegUnivEn; % 17 %
DI  : RegUnivEn; % 18 %


BEGIN

DEFAULTS 
	Ax.Enable = GND;
	Bx.Enable = GND;
	Cx.Enable = GND;
	Dx.Enable = GND;
	Ex.Enable = GND;
	
	alu_x.Enable = GND; 
	alu_y.Enable = GND; 
	
	DST.Enable = GND;
	SRC.Enable = GND;
	
	PC.Enable = GND;
	MAR.Enable = GND;
	MDR.Enable = GND;
	IR.Enable = GND;
	BP.Enable = GND;
	SP.Enable = GND;
	SI.Enable = GND;
	DI.Enable = GND;

END DEFAULTS;

	ALU.(Reloj, Reset, A[7..0], B[7..0], Operation[2..0]) = (Reloj, Reset, alu_x.Salida,alu_y.Salida, SelOp[2..0] );
	FLAGS[0] = ALU.CarryOut; 
	FLAGS[1] = ALU.Overflow;
	FLAGS[2] = ALU.Zero;
	FLAGS[3] = ALU.Negative;
	FLAGS[4] = ALU.AgtB;
	FLAGS[5] = ALU.AstB;
	FLAGS[6] = ALU.AeqB;
	FLAGS[7] = ALU.Error;
	
% Registros Generales%

	Ax.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	Bx.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	Cx.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	Ex.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	Dx.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	
% Registro de ALU%
	alu_x.(Reloj, Reset, Dato[7..0]) = (Reloj, Reset, BUS[7..0]);
	alu_y.(Reloj, Reset, Dato[7..0]) = (Reloj, Reset, BUS[7..0]);
	
	alu_r.(Reloj, Reset) = (Reloj, Reset);
	alu_r.Dato = ALU.Result;
	alu_r.Enable = VCC;
	
	alu_res.(Reloj, Reset) = (Reloj, Reset);
	alu_res.Dato = ALU.Remain;
	alu_res.Enable = VCC;
	
	
% Registros destino y fuente%
   DST.(Reloj, Reset, Dato[7..0]) = (Reloj, Reset, BUS[7..0]);
	SRC.(Reloj, Reset, Dato[7..0]) = (Reloj, Reset, BUS[7..0]);
	
% Registros de Trabajo con RAM%
	PC.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	MAR.(Reloj, Reset) = (Reloj, Reset);
	MDR.(Reloj, Reset) = (Reloj, Reset);
	IR.(Reloj, Reset, Dato[7..0]) = (Reloj, Reset, BUS[7..0]);
	BP.(Reloj, Reset, Dato[7..0]) = (Reloj, Reset, BUS[7..0]);
	SP.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	SI.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	DI.(Reloj,Reset,Dato[7..0],Cmd [2..0]) = (Reloj, Reset, BUS[7..0],Cmd[2..0]);
	
	--Salidas de debug
	SRC_t[] = SRC.Salida[];
	DST_t[] = DST.Salida[];
	Ax_t[] = Ax.Salida[];
	Bx_t[] = Bx.Salida[];
	Cx_t[] = Cx.Salida[];
	Dx_t[] = Dx.Salida[];
	Ex_t[] = Ex.Salida[];
	
	x_t[] = alu_x.Salida[];
	y_t[] = alu_y.Salida[];
	r_t[] = alu_r.Salida[];
	res_t[] = alu_res.Salida[];
	Flags_t[] = FLAGS[];
	
	ALU_t[] = ALU.Result[];
	Bus_t[] = BUS[];
	PC_t []= PC.Salida[];
	MAR_t[] = MAR.Salida[];
	MDR_t[] = MDR.Salida[];
	IR_t[] = IR.Salida[];
	SelBus_t[] = SelBus[];
	
	-- Salidas hacia la RAM
	
	ADDR_BUS[] = MAR.Salida[];
	DATA_BUS_OUT[] = MDR.Salida[];
	
	%-----------------------------SELECTOR MAR ------------------------------------%
	
	IF (SelMAR == GND) THEN
		MAR.Dato[] = PC.Salida[]; 
	ELSE
		MAR.Dato[] = BUS[]; 
	END IF;
	
		%-----------------------------SELECTOR MDR ------------------------------------%
	
	IF (SelMDR == GND) THEN
		MDR.Dato[] = DATA_BUS_IN[]; 
	ELSE
		MDR.Dato[] = BUS[]; 
	END IF;
	
	
	% ---------------------------SELECTOR DE VALOR DE BUS--------------------------------- %
	IF (SelSRC == VCC) THEN
		SelBus[] = SRC_UC[]; % FUENTE DESDE LA UNIDAD DE CONTROL %
	ELSE
		SelBus[] = SRC.Salida[4..0]; % FUENTE DESDE EL REGISTRO SRC %
	END IF;

	CASE SelBus[] IS
		WHEN 0 =>
			BUS[] = Ax.Salida[];
	
		WHEN 1 =>
			BUS[] = Bx.Salida[];
		
		WHEN 2 =>
			BUS[] = Cx.Salida[];
			
		WHEN 5 =>
			BUS[] = Fx[];
			
		WHEN 8 =>
			BUS[] = alu_r.Salida[7..0];
			
		WHEN 11 =>
			BUS[] = PC.Salida[];
			
		WHEN 12 =>
			BUS[] = MAR.Salida[];
			
		WHEN 13 =>
			BUS[] = MDR.Salida[];
			
		WHEN 14 =>
			BUS[] = IR.Salida[];
			
		WHEN 15 =>
			BUS[] = BP.Salida[];
			
		WHEN 16 =>
			BUS[] = SP.Salida[];
		
		WHEN 17 =>
			BUS[] = SI.Salida[];
			
		WHEN 18 =>
			BUS[] = DI.Salida[];
			
		WHEN OTHERS =>
		
			BUS[] = B"10101010";
			
	END CASE;
	
	% ---------------------------------SELECTOR DE DESTINO -------------------------------------------%
	
	IF (SelDST == VCC) THEN
		SelMux[] = DST_UC[]; %DESTINO DESDE LA UNIDAD DE CONTROL%
	ELSE
		SelMux[] = DST.Salida[4..0]; %DESTINO DESDE EL REGISTRO DST%
	END IF;
	
		--Decoder de enables 
		CASE SelMux[] IS
			WHEN 0 =>
				Ax.Enable = VCC;
		
			WHEN 1 =>
				Bx.Enable = VCC;
				
			WHEN 2 =>
				Cx.Enable = VCC;	
				
			WHEN 3 =>
				Dx.Enable = VCC;	
				
			WHEN 4 =>
				Ex.Enable = VCC;	
				
			WHEN 6 =>
				alu_x.Enable = VCC; 
				
			WHEN 7 =>
				alu_y.Enable = VCC; 
				
			WHEN 9 =>
				DST.Enable = VCC; 
				
			WHEN 10 =>
				SRC.Enable = VCC; 
				
			WHEN 11 =>
				PC.Enable = VCC; 
				
			WHEN 12 =>
				MAR.Enable = VCC; 
				
			WHEN 13 =>
				MDR.Enable = VCC; 
				
			WHEN 14 =>
				IR.Enable = VCC; 
				
			WHEN 15 =>
				BP.Enable = VCC; 
				
			WHEN 16 =>
				SP.Enable = VCC; 
				
			WHEN 17 =>
				SI.Enable = VCC; 
				
			WHEN 18 =>
				DI.Enable = VCC; 
					
			WHEN OTHERS =>
			
				Ax.Enable = GND;
				Bx.Enable = GND;
				Cx.Enable = GND;
				Dx.Enable = GND;
				Ex.Enable = GND;
				
				alu_x.Enable = GND; 
				alu_y.Enable = GND; 
				
				DST.Enable = GND;
				SRC.Enable = GND;
				
				PC.Enable = GND;
				MAR.Enable = GND;
				MDR.Enable = GND;
				IR.Enable = GND;
				BP.Enable = GND;
				SP.Enable = GND;
				SI.Enable = GND;
				DI.Enable = GND;
				
			
		END CASE;
	
END;